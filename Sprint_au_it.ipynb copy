{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 376,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Important notes: All those greater than 5 had consensus.\n",
    "import numpy as np\n",
    "from IPython.core.display import HTML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "38067\n",
      "39023\n",
      "40632\n",
      "41587\n",
      "42256\n",
      "42943\n"
     ]
    }
   ],
   "source": [
    "files = ['ca-seed-inputs.json' ,\n",
    "             'it-seed-inputs.json', 'us-seed-inputs.json', 'au-seed-inputs.json', \n",
    "             'gb-seed-inputs.json' , \n",
    "             'fr-seed-inputs.json']\n",
    "json_file = \"/Users/kimia/Desktop/Work5/sprint/\"\n",
    "all_data=[]\n",
    "df_seed_inputs = pd.DataFrame()\n",
    "for file_num, file_name in enumerate(files):\n",
    "\n",
    "    with open(json_file + str(file_name)) as f:\n",
    "        \n",
    "        for line in f:\n",
    "            data.append(json.loads( line.rstrip('\\n')))\n",
    "    print(len(data))\n",
    "    for i, v in enumerate(data[0:]):\n",
    "        d1 = (data[i]['data']['extraction']['inputMeta'])\n",
    "        df1 = pd.Series(d1).to_frame().T\n",
    "        df1['file'] = str(file_name)\n",
    "        df_seed_inputs = pd.concat([df1, df_seed_inputs], axis=0)\n",
    "df_seed_inputs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 424,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "au-extracted.json  i\n",
      "it-extracted.json  i\n"
     ]
    }
   ],
   "source": [
    "## THIS IS THE FINAL JUN 7 at 1:33\n",
    "finaltaskusdf = pd.DataFrame()\n",
    "finallocdf = pd.DataFrame()\n",
    "data = {}\n",
    "all_df= []\n",
    "df_s = pd.DataFrame()\n",
    "files =  ['au-extracted.json','it-extracted.json']\n",
    "          #,'fr-extracted.json','gb-extracted.json'\n",
    "          #   'ca-extracted.json', \n",
    "          #   'it-extracted.json', 'us-extracted.json']\n",
    "\n",
    "for file_num, file_name in enumerate(files):\n",
    "    data = {}\n",
    "    print(str(file_name)+\"  i\")\n",
    "    with open('/Users/kimia/Desktop/Work5/sprint/' + str(file_name)) as f:\n",
    "            \n",
    "            for line in f:\n",
    "                \n",
    "                data.update(json.loads( line.rstrip('\\n')))\n",
    "                all_df.append(data)\n",
    "\n",
    "                taskusedits = pd.Series(data['data']['extraction']['payload']).to_frame().T\n",
    "                taskusedits['id'] = (data['uri'])\n",
    "                taskusedits['file'] = str(file_name)\n",
    "                \n",
    "                locdf = pd.Series(data['data']['extraction']['rawPayload']).to_frame().T\n",
    "                locdf['id'] = (data['uri'])\n",
    "                locdf['file'] = str(file_name)\n",
    "\n",
    "\n",
    "                finaltaskusdf = pd.concat([taskusedits, finaltaskusdf], axis=0)\n",
    "                finallocdf = pd.concat([locdf, finallocdf], axis=0)\n",
    "       \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "finallocdf['id'] = finallocdf['id'].apply(lambda x: int(x[-6:]))\n",
    "finaltaskusdf['id']= finaltaskusdf['id'].apply(lambda x: int(x[-6:]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 442,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "au-seed-inputs.json  i\n",
      "it-seed-inputs.json  i\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "\"\\n## THIS WORK!! 1:36 JUN 7\\ndata = {}\\ndf_s = pd.DataFrame()\\nwith open('/Users/kimia/Desktop/Work5/sprint/au-seed-inputs.json') as f:\\n    for line in f:\\n        data.update(json.loads( line.rstrip('\\n')))\\n        #print(data['data']['extraction']['inputMeta'])\\n        \\n        d1 = pd.Series(data['data']['extraction']['inputMeta']).to_frame().T \\n        \\n        df_s = pd.concat([df_s, d1], axis=0)\\n      \""
      ]
     },
     "execution_count": 442,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "## THIS WORK!! 1:36 JUN 7\n",
    "data = {}\n",
    "df_s = pd.DataFrame()\n",
    "files = ['au-seed-inputs.json', 'it-seed-inputs.json',]\n",
    "for file_num, file_name in enumerate(files):\n",
    "\n",
    "    print(str(file_name)+\"  i\")\n",
    "    with open('/Users/kimia/Desktop/Work5/sprint/' + str(file_name)) as f:\n",
    "        \n",
    "        \n",
    "        for line in f:\n",
    "            data.update(json.loads( line.rstrip('\\n')))\n",
    "            #print(data['data']['extraction']['inputMeta'])\n",
    "\n",
    "            d1 = pd.Series(data['data']['extraction']['inputMeta']).to_frame().T \n",
    "        \n",
    "            d1['file'] = str(file_name)\n",
    "            df_s = pd.concat([df_s, d1], axis=0)\n",
    "        \n",
    "        \n",
    "\"\"\"\n",
    "## THIS WORK!! 1:36 JUN 7\n",
    "data = {}\n",
    "df_s = pd.DataFrame()\n",
    "with open('/Users/kimia/Desktop/Work5/sprint/au-seed-inputs.json') as f:\n",
    "    for line in f:\n",
    "        data.update(json.loads( line.rstrip('\\n')))\n",
    "        #print(data['data']['extraction']['inputMeta'])\n",
    "        \n",
    "        d1 = pd.Series(data['data']['extraction']['inputMeta']).to_frame().T \n",
    "        \n",
    "        df_s = pd.concat([df_s, d1], axis=0)\n",
    "      \"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 461,
   "metadata": {},
   "outputs": [],
   "source": [
    "result = (pd.merge(df_s,finaltaskusdf, on = ['id'])) # correct merge: (result.file_x == result.file_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 468,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1911, 1911, 1911)"
      ]
     },
     "execution_count": 468,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 439,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "\"## THIS IS THE FINAL JUN 7 at 1:33\\nfinaltaskusdf = pd.DataFrame()\\nfinallocdf = pd.DataFrame()\\ndata = {}\\nall_df= []\\nfor file_num, file_name in enumerate(files):\\n    with open('/Users/kimia/Desktop/Work5/sprint/au-extracted.json') as f:\\n\\n            for line in f:\\n\\n                data.update(json.loads( line.rstrip('\\n')))\\n                all_df.append(data)\\n\\n                taskusedits = pd.Series(data['data']['extraction']['payload']).to_frame().T\\n                taskusedits['id'] = (data['uri'])\\n\\n                locdf = pd.Series(data['data']['extraction']['rawPayload']).to_frame().T\\n                locdf['id'] = (data['uri'])\\n\\n\\n                finaltaskusdf = pd.concat([taskusedits, finaltaskusdf], axis=0)\\n                finallocdf = pd.concat([locdf, finallocdf], axis=0)\\n            \\n\\nfinallocdf['id'] = finallocdf['id'].apply(lambda x: int(x[-6:]))\\nfinaltaskusdf['id']= finaltaskusdf['id'].apply(lambda x: int(x[-6:]))\\n\\n## THIS WORK!! 1:36 JUN 7\\ndata = {}\\ndf_s = pd.DataFrame()\\nwith open('/Users/kimia/Desktop/Work5/sprint/au-seed-inputs.json') as f:\\n    for line in f:\\n        data.update(json.loads( line.rstrip('\\n')))\\n        #print(data['data']['extraction']['inputMeta'])\\n        \\n        d1 = pd.Series(data['data']['extraction']['inputMeta']).to_frame().T \\n        \\n        df_s = pd.concat([df_s, d1], axis=0)\\n\""
      ]
     },
     "execution_count": 439,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"## THIS IS THE FINAL JUN 7 at 1:33\n",
    "finaltaskusdf = pd.DataFrame()\n",
    "finallocdf = pd.DataFrame()\n",
    "data = {}\n",
    "all_df= []\n",
    "for file_num, file_name in enumerate(files):\n",
    "    with open('/Users/kimia/Desktop/Work5/sprint/au-extracted.json') as f:\n",
    "\n",
    "            for line in f:\n",
    "\n",
    "                data.update(json.loads( line.rstrip('\\n')))\n",
    "                all_df.append(data)\n",
    "\n",
    "                taskusedits = pd.Series(data['data']['extraction']['payload']).to_frame().T\n",
    "                taskusedits['id'] = (data['uri'])\n",
    "\n",
    "                locdf = pd.Series(data['data']['extraction']['rawPayload']).to_frame().T\n",
    "                locdf['id'] = (data['uri'])\n",
    "\n",
    "\n",
    "                finaltaskusdf = pd.concat([taskusedits, finaltaskusdf], axis=0)\n",
    "                finallocdf = pd.concat([locdf, finallocdf], axis=0)\n",
    "            \n",
    "\n",
    "finallocdf['id'] = finallocdf['id'].apply(lambda x: int(x[-6:]))\n",
    "finaltaskusdf['id']= finaltaskusdf['id'].apply(lambda x: int(x[-6:]))\n",
    "\n",
    "## THIS WORK!! 1:36 JUN 7\n",
    "data = {}\n",
    "df_s = pd.DataFrame()\n",
    "with open('/Users/kimia/Desktop/Work5/sprint/au-seed-inputs.json') as f:\n",
    "    for line in f:\n",
    "        data.update(json.loads( line.rstrip('\\n')))\n",
    "        #print(data['data']['extraction']['inputMeta'])\n",
    "        \n",
    "        d1 = pd.Series(data['data']['extraction']['inputMeta']).to_frame().T \n",
    "        \n",
    "        df_s = pd.concat([df_s, d1], axis=0)\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 414,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    fr-seed-inputs.json\n",
       "Name: file, dtype: object"
      ]
     },
     "execution_count": 414,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "finallocdf['id'] = finallocdf['id'].apply(lambda x: int(x[-6:]))\n",
    "finaltaskusdf['id']= finaltaskusdf['id'].apply(lambda x: int(x[-6:]))\n",
    "\n",
    "## THIS WORK!! 1:36 JUN 7\n",
    "data = {}\n",
    "df_s = pd.DataFrame()\n",
    "with open('/Users/kimia/Desktop/Work5/sprint/au-seed-inputs.json') as f:\n",
    "    for line in f:\n",
    "        data.update(json.loads( line.rstrip('\\n')))\n",
    "        #print(data['data']['extraction']['inputMeta'])\n",
    "        \n",
    "        d1 = pd.Series(data['data']['extraction']['inputMeta']).to_frame().T \n",
    "        \n",
    "        df_s = pd.concat([df_s, d1], axis=0)\"\"\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 426,
   "metadata": {},
   "outputs": [],
   "source": [
    "\"\"\"result = (pd.merge(df_s,finaltaskusdf, on = 'id'))\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 469,
   "metadata": {},
   "outputs": [],
   "source": [
    "result.to_csv('result_AU_IT.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 472,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['id', 'sourceUrl', 'task_id', 'user_id', 'file_x', '_original_category',\n",
       "       '_records_touched', 'address', 'address_extended', 'admin_region',\n",
       "       'alcohol', 'alcohol_bar', 'alcohol_beer_wine', 'category_ids',\n",
       "       'country', 'cuisine', 'file_y', 'locality', 'name', 'postcode',\n",
       "       'region', 'tel', 'website'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 472,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 473,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The percent of disagreements for id : 1.0\n",
      "The percent of disagreements for sourceUrl : 1.0\n",
      "The percent of disagreements for user_id : 1.0\n",
      "The percent of disagreements for address : 0.47643979057591623\n",
      "The percent of disagreements for address_extended : 0.031413612565445025\n",
      "The percent of disagreements for alcohol : 0.002617801047120419\n",
      "The percent of disagreements for alcohol_bar : 0.002617801047120419\n",
      "The percent of disagreements for alcohol_beer_wine : 0.002617801047120419\n",
      "The percent of disagreements for country : 0.013089005235602094\n",
      "The percent of disagreements for cuisine : 0.002617801047120419\n",
      "The percent of disagreements for locality : 0.13350785340314136\n",
      "The percent of disagreements for name : 0.3036649214659686\n",
      "The percent of disagreements for postcode : 0.1806282722513089\n",
      "The percent of disagreements for region : 0.028795811518324606\n",
      "The percent of disagreements for tel : 0.38481675392670156\n",
      "The percent of disagreements for website : 0.7382198952879581\n"
     ]
    }
   ],
   "source": [
    "def accuracy_per_column(column):\n",
    "    cons = result.groupby([ 'task_id', (str(column))]).size().to_frame()\n",
    "    cons['count'] = cons[0]\n",
    "    j = (cons[cons['count']<5]).reset_index()\n",
    "    numer_mistakes  = len(j['task_id'].unique())\n",
    "    total = len(result['task_id'].unique())\n",
    "    return print('The percent of disagreements for',str(column),(\":\"), numer_mistakes/total)\n",
    "    ### make this a pretty print\n",
    "    \n",
    "    \n",
    "columnsz = ['id',\n",
    " 'sourceUrl',\n",
    " 'user_id',\n",
    " 'address',\n",
    " 'address_extended',\n",
    " 'alcohol',\n",
    " 'alcohol_bar',\n",
    " 'alcohol_beer_wine',\n",
    " 'country',\n",
    " 'cuisine',\n",
    " 'locality',\n",
    " 'name',\n",
    " 'postcode',\n",
    " 'region',\n",
    " 'tel',\n",
    " 'website']\n",
    "    \n",
    "    \n",
    "for i, v in enumerate(columnsz): \n",
    "    accuracy_per_column(str(v))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([59217, 59351, 59384, 59530, 59532, 59628, 59636, 59682, 59813,\n",
       "       59963, 60032, 60068])"
      ]
     },
     "execution_count": 325,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cons = result.groupby([ 'task_id', 'name']).size().to_frame()\n",
    "cons['count'] = cons[0]\n",
    "k = (cons[(cons['count']==2) | (cons['count']==3) ]).reset_index()\n",
    "(k.task_id.unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Idenitifying Poor Performers\n",
    "on 'address', 'name', 'tel'- the three columns with the least consensus. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 403,
   "metadata": {},
   "outputs": [],
   "source": [
    "def singleouttaskus(column_namesz):\n",
    "    final_df = pd.DataFrame()\n",
    "    for num, column_name in enumerate(column_namesz):\n",
    "        ## For each user, how often do How often is this person the only person who disagrees?\n",
    "        lowagreement = result.groupby([ 'task_id', str(column_name)]).size().to_frame(name = 'count').reset_index()\n",
    "        lowagreement = lowagreement[lowagreement['count'] == 1]\n",
    "        lowagreement =  pd.merge(lowagreement,result,  how = 'right', on=[ 'task_id',str(column_name)])\n",
    "        differ_from_others = ((lowagreement.groupby('user_id').count()['count'].to_frame())).sort_values('count', ascending=False).reset_index()\n",
    "        total = result.groupby(['user_id']).count()['task_id'].to_frame(name = 'count').reset_index()\n",
    "        perfmstat = pd.merge(differ_from_others,total,  on=['user_id'])\n",
    "        perfmstat['%'] = (perfmstat['count_x']/perfmstat['count_y'])*100\n",
    "        #perfmstat = perfmstat.rename(index=str, columns={\"count_x\": \"#timediffer\", 'count': 'totalannot'})\n",
    "        print(\"Top users who are the *only* Taskus employee diverging from consensus (5) on\", str(column_name))\n",
    "        display(HTML(((perfmstat.sort_values('%', ascending=False).reset_index())[0:]).to_html()))\n",
    "        final_df = pd.concat([perfmstat,final_df],axis=0 )\n",
    "        return final_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 474,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "List of users who disagree from 4+ other taskus employees, summed % across address, tel, and name\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>%</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>30</td>\n",
       "      <td>46.153846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>40</td>\n",
       "      <td>39.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>39</td>\n",
       "      <td>37.704918</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16</td>\n",
       "      <td>32.989691</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>33</td>\n",
       "      <td>26.315789</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>29</td>\n",
       "      <td>24.285714</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>17</td>\n",
       "      <td>24.175824</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>37</td>\n",
       "      <td>23.076923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>46</td>\n",
       "      <td>21.590909</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>44</td>\n",
       "      <td>20.618557</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>25</td>\n",
       "      <td>20.238095</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>38</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>47</td>\n",
       "      <td>19.178082</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>36</td>\n",
       "      <td>18.867925</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>20</td>\n",
       "      <td>17.582418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>45</td>\n",
       "      <td>15.662651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>21</td>\n",
       "      <td>13.888889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>23</td>\n",
       "      <td>13.846154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>41</td>\n",
       "      <td>12.698413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>58</td>\n",
       "      <td>11.428571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>31</td>\n",
       "      <td>10.937500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>26</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>43</td>\n",
       "      <td>7.792208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>49</td>\n",
       "      <td>6.818182</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>59</td>\n",
       "      <td>5.263158</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>22</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    user_id          %\n",
       "0        30  46.153846\n",
       "1        40  39.200000\n",
       "2        39  37.704918\n",
       "3        16  32.989691\n",
       "4        33  26.315789\n",
       "5        29  24.285714\n",
       "6        17  24.175824\n",
       "7        37  23.076923\n",
       "8        46  21.590909\n",
       "9        44  20.618557\n",
       "10       25  20.238095\n",
       "11       38  20.000000\n",
       "12       47  19.178082\n",
       "13       36  18.867925\n",
       "14       20  17.582418\n",
       "15       45  15.662651\n",
       "16       21  13.888889\n",
       "17       23  13.846154\n",
       "18       41  12.698413\n",
       "19       58  11.428571\n",
       "20       31  10.937500\n",
       "21       26  10.000000\n",
       "22       43   7.792208\n",
       "23       49   6.818182\n",
       "24       59   5.263158\n",
       "25       22   0.000000"
      ]
     },
     "execution_count": 474,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "column_namesz = ['address', 'name', 'tel']\n",
    "final_df = pd.DataFrame()\n",
    "for num, column_name in enumerate(column_namesz):\n",
    "    ## For each user, how often do How often is this person the only person who disagrees?\n",
    "    lowagreement = result.groupby([ 'task_id', str(column_name)]).size().to_frame(name = 'count').reset_index()\n",
    "    lowagreement = lowagreement[lowagreement['count'] == 1]\n",
    "    lowagreement =  pd.merge(lowagreement,result,  how = 'right', on=[ 'task_id',str(column_name)])\n",
    "    differ_from_others = ((lowagreement.groupby('user_id').count()['count'].to_frame())).sort_values('count', ascending=False).reset_index()\n",
    "    total = result.groupby(['user_id']).count()['task_id'].to_frame(name = 'count').reset_index()\n",
    "    perfmstat = pd.merge(differ_from_others,total,  on=['user_id'])\n",
    "    perfmstat['%'] = (perfmstat['count_x']/perfmstat['count_y'])*100\n",
    "    #perfmstat = perfmstat.rename(index=str, columns={\"count_x\": \"#timediffer\", 'count': 'totalannot'})\n",
    "    #print(\"Top users who are the *only* Taskus employee diverging from consensus (5) on\", str(column_name))\n",
    "    #display(HTML(((perfmstat.sort_values('%', ascending=False).reset_index())[0:]).to_html()))\n",
    "    final_df = pd.concat([perfmstat,final_df],axis=0 )\n",
    "print(\"List of users who disagree from 4+ other taskus employees, summed % across address, tel, and name\")\n",
    "final_df.groupby(['user_id']).sum()[\"%\"].to_frame().sort_values('%', ascending=False).reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
